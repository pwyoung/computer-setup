################################################################################
# Initial Setup
################################################################################

Utils:
  sudo apt update
  sudo apt upgrade
  sudo apt install emacs-nox htop tree

SSH-Keys:
  - ssh-keygen -t rsa
  - Send to github

BIN AND OTHER STUFF:
  - mkdir -p ~/git; cd $_; git clone git@github.com:pwyoung/computer-setup.git
  Make links:
    - cd  ~/git/computer-setup/home/bin/ && ./setup-popos-computer.sh
    OR
    - for i in $(ls -a ~/git/computer-setup/home | egrep -v '(^.$|^..$)' ); do echo $i; ln -s ~/git/computer-setup/home/$i ~/$i; done

Terminal
  Set create/destroy/next/previous tabs
  Edit profile and set "command as login shell"

Firefox:
  - sync
  - log into github, add keys, clone this repo

################################################################################
# BACKUPS
################################################################################

Add timeshift

################################################################################
# COSMETIC CHANGES
################################################################################

# Gnome-Shell extensions
https://extensions.gnome.org/extension/3088/extension-list/

# Themes
# https://www.opendesktop.org/s/Gnome/browse?cat=135&ord=latest

# Add theme
mkdir -f ~/.themes && cd $_
git clone https://www.opendesktop.org/s/Gnome/p/1267246



# Use gnome-tweaks (even though this isn't supposedly supported)
https://www.opendesktop.org/s/Gnome/browse?cat=135&page=2&ord=latest
gnome-tweaks

# Just icon theme
https://github.com/L4ki/Breeze-Chameleon-Icons


################################################################################
# PYTHON3
################################################################################

Python:
  - python3 -m venv ~/venv/python3
  - Open new terminal
  - which python

################################################################################
# VIRT-MANAGER AS NON-ROOT
################################################################################

# https://computingforgeeks.com/use-virt-manager-as-non-root-user/
systemctl status libvirtd.service

# Step 1 – Create unix group to use
sudo getent group | grep libvirt # Note: this is "libvirt", not "libvirtd" group name
sudo groupadd --system libvirt
# Step 2 – Add user account to the libvirt group
sudo usermod -a -G libvirt $(whoami)
newgrp libvirt
# Step 3 – Edit libvirtd configuration file to add group
sudo emacs /etc/libvirt/libvirtd.conf
unix_sock_group = "libvirt"
unix_sock_rw_perms = "0770"
sudo systemctl restart libvirtd.service
systemctl status libvirtd.service
virt-manager

################################################################################
# Create QEMU/KVM "User Session"
################################################################################

virt-manager -> File -> Add connection
  -> Hypervisor -> QEMU/KVM user session [set as default]


################################################################################
# KVM SUPPORT FOR EVERYTHING (Nesting and device pass-through)
################################################################################

https://docs.fedoraproject.org/en-US/quick-docs/using-nested-virtualization-in-kvm/
https://stafwag.github.io/blog/blog/2018/06/04/nested-virtualization-in-kvm/

virt-host-validate | grep -v PASS
  QEMU: Checking if IOMMU is enabled by kernel                               : WARN (IOMMU appears to be disabled in kernel. Add intel_iommu=on to kernel cmdline arguments)

sudo kernelstub -a intel_iommu=on

virt-host-validate # ALL PASS

TODO: PASSTHROUGH
  https://access.redhat.com/documentation/en-us/red_hat_virtualization/4.1/html/installation_guide/appe-configuring_a_hypervisor_host_for_pci_passthrough

################################################################################
# NOMAJ DEPS
################################################################################

This sets up:
- ansible
- vagrant
- virt-manager, libvirt, kvm, qemu
- QEMU/Session (network bridge to virbr0)

Packages:
  - sudo apt-get install python3-venv vagrant-libvirt ansible qemu qemu-kvm bridge-utils virt-manager
  - sudo ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/usr.sbin.libvirtd && reboot
  - QEMU/Session (for Libvirt/KVM as non-root)
    - sudo mkdir -p /etc/qemu
    - echo 'allow virbr0' | sudo tee /etc/qemu/bridge.conf
    - sudo chmod u+s /usr/lib/qemu/qemu-bridge-helper
    - sudo ln -s /etc/apparmor.d/usr.sbin.libvirtd /etc/apparmor.d/disable/usr.sbin.libvirtd && reboot
  - sudo service libvirtd status

################################################################################
# DOCKER COMPOSE
################################################################################

sudo apt-get update
sudo apt-get auto-remove

apt-get install docker-compose

# Run as non-root
sudo usermod -aG docker $USER
newgrp docker #Or reboot to affect all shells
docker run hello-world

################################################################################
# Windows in Gnome-Boxes
################################################################################

# References:
- https://docs.fedoraproject.org/en-US/quick-docs/creating-windows-virtual-machines-using-virtio-drivers/
- https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/virtualization_host_configuration_and_guest_installation_guide/form-virtualization_host_configuration_and_guest_installation_guide-para_virtualized_drivers-mounting_the_image_with_virt_manager

Installed Drivers:
  - Get latest iso with drivers
    - wget https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/archive-virtio/virtio-win-0.1.171-1/virtio-win.iso
Drivers:
  - NetKVM/ - Virtio network driver

No Change:
  - Disk
  - Display Adapter

viostor/ - Virtio block driver

vioscsi/ - Virtio Small Computer System Interface (SCSI) driver

vioser/ - Virtio serial driver
Balloon/ - Virtio memory balloon driver

/media/pyoung/data/downloads/OperatingSystems/win10/win10_home/Win10_1909_English_x64.iso

virsh vcpupin win10

# PROCESSOR AFFINITY
https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/5/html/virtualization/ch33s08
https://fatmin.com/2016/01/06/numa-cpu-pinning-with-kvmvirsh/
# Or not
https://www.reddit.com/r/VFIO/comments/7zcn5g/kvm_windows_10_guest_cpu_pinning_recommended/

# VFIO
https://gist.github.com/hflw/ed9590f4c79daaeb482c2419f74ed897

################################################################################
# TODO: TEST NOMAJ AGAIN W/VIRTUALBOX
################################################################################

sudo apt-get install virtualbox
sudo apt install virtualbox-ext-pack

sudo apt remove virtualbox
