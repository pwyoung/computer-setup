/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/clustersMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Clusters. */
var Clusters = /** @class */ (function () {
    /**
     * Create a Clusters.
     * @param {HDInsightManagementClientContext} client Reference to the service client.
     */
    function Clusters(client) {
        this.client = client;
    }
    /**
     * Creates a new HDInsight cluster with the specified parameters.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The cluster create request.
     * @param [options] The optional parameters
     * @returns Promise<Models.ClustersCreateResponse>
     */
    Clusters.prototype.create = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginCreate(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.update = function (resourceGroupName, clusterName, parameters, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, updateOperationSpec, callback);
    };
    /**
     * Deletes the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.deleteMethod = function (resourceGroupName, clusterName, options) {
        return this.beginDeleteMethod(resourceGroupName, clusterName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.get = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, getOperationSpec, callback);
    };
    Clusters.prototype.listByResourceGroup = function (resourceGroupName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            options: options
        }, listByResourceGroupOperationSpec, callback);
    };
    /**
     * Resizes the specified HDInsight cluster to the specified size.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for the resize operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.resize = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginResize(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.list = function (options, callback) {
        return this.client.sendOperationRequest({
            options: options
        }, listOperationSpec, callback);
    };
    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for the disk encryption operation.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.rotateDiskEncryptionKey = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginRotateDiskEncryptionKey(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Clusters.prototype.getGatewaySettings = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, getGatewaySettingsOperationSpec, callback);
    };
    /**
     * Configures the gateway settings on the specified cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The cluster configurations.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.updateGatewaySettings = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginUpdateGatewaySettings(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Executes script actions on the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for executing script actions.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Clusters.prototype.executeScriptActions = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginExecuteScriptActions(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates a new HDInsight cluster with the specified parameters.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The cluster create request.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginCreate = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginDeleteMethod = function (resourceGroupName, clusterName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    /**
     * Resizes the specified HDInsight cluster to the specified size.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for the resize operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginResize = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginResizeOperationSpec, options);
    };
    /**
     * Rotate disk encryption key of the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for the disk encryption operation.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginRotateDiskEncryptionKey = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginRotateDiskEncryptionKeyOperationSpec, options);
    };
    /**
     * Configures the gateway settings on the specified cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The cluster configurations.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginUpdateGatewaySettings = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginUpdateGatewaySettingsOperationSpec, options);
    };
    /**
     * Executes script actions on the specified HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The parameters for executing script actions.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Clusters.prototype.beginExecuteScriptActions = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginExecuteScriptActionsOperationSpec, options);
    };
    Clusters.prototype.listByResourceGroupNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listByResourceGroupNextOperationSpec, callback);
    };
    Clusters.prototype.listNext = function (nextPageLink, options, callback) {
        return this.client.sendOperationRequest({
            nextPageLink: nextPageLink,
            options: options
        }, listNextOperationSpec, callback);
    };
    return Clusters;
}());
export { Clusters };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var updateOperationSpec = {
    httpMethod: "PATCH",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ClusterPatchParameters, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/providers/Microsoft.HDInsight/clusters",
    urlParameters: [
        Parameters.subscriptionId
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getGatewaySettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/getGatewaySettings",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.GatewaySettings
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ClusterCreateParametersExtended, { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.Cluster
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginResizeOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/roles/{roleName}/resize",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName,
        Parameters.roleName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ClusterResizeParameters, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginRotateDiskEncryptionKeyOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/rotatediskencryptionkey",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ClusterDiskEncryptionParameters, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginUpdateGatewaySettingsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/updateGatewaySettings",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.UpdateGatewaySettingsParameters, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginExecuteScriptActionsOperationSpec = {
    httpMethod: "POST",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/executeScriptActions",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ExecuteScriptActionParameters, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listByResourceGroupNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var listNextOperationSpec = {
    httpMethod: "GET",
    baseUrl: "https://management.azure.com",
    path: "{nextLink}",
    urlParameters: [
        Parameters.nextPageLink
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterListResult
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=clusters.js.map