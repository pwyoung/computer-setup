/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as tslib_1 from "tslib";
import * as msRest from "@azure/ms-rest-js";
import * as Mappers from "../models/extensionsMappers";
import * as Parameters from "../models/parameters";
/** Class representing a Extensions. */
var Extensions = /** @class */ (function () {
    /**
     * Create a Extensions.
     * @param {HDInsightManagementClientContext} client Reference to the service client.
     */
    function Extensions(client) {
        this.client = client;
    }
    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The Operations Management Suite (OMS) workspace parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Extensions.prototype.enableMonitoring = function (resourceGroupName, clusterName, parameters, options) {
        return this.beginEnableMonitoring(resourceGroupName, clusterName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Extensions.prototype.getMonitoringStatus = function (resourceGroupName, clusterName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, getMonitoringStatusOperationSpec, callback);
    };
    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Extensions.prototype.disableMonitoring = function (resourceGroupName, clusterName, options) {
        return this.beginDisableMonitoring(resourceGroupName, clusterName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Creates an HDInsight cluster extension.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param extensionName The name of the cluster extension.
     * @param parameters The cluster extensions create request.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Extensions.prototype.create = function (resourceGroupName, clusterName, extensionName, parameters, options) {
        return this.beginCreate(resourceGroupName, clusterName, extensionName, parameters, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    Extensions.prototype.get = function (resourceGroupName, clusterName, extensionName, options, callback) {
        return this.client.sendOperationRequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            extensionName: extensionName,
            options: options
        }, getOperationSpec, callback);
    };
    /**
     * Deletes the specified extension for HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param extensionName The name of the cluster extension.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    Extensions.prototype.deleteMethod = function (resourceGroupName, clusterName, extensionName, options) {
        return this.beginDeleteMethod(resourceGroupName, clusterName, extensionName, options)
            .then(function (lroPoller) { return lroPoller.pollUntilFinished(); });
    };
    /**
     * Enables the Operations Management Suite (OMS) on the HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param parameters The Operations Management Suite (OMS) workspace parameters.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Extensions.prototype.beginEnableMonitoring = function (resourceGroupName, clusterName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            parameters: parameters,
            options: options
        }, beginEnableMonitoringOperationSpec, options);
    };
    /**
     * Disables the Operations Management Suite (OMS) on the HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Extensions.prototype.beginDisableMonitoring = function (resourceGroupName, clusterName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            options: options
        }, beginDisableMonitoringOperationSpec, options);
    };
    /**
     * Creates an HDInsight cluster extension.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param extensionName The name of the cluster extension.
     * @param parameters The cluster extensions create request.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Extensions.prototype.beginCreate = function (resourceGroupName, clusterName, extensionName, parameters, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            extensionName: extensionName,
            parameters: parameters,
            options: options
        }, beginCreateOperationSpec, options);
    };
    /**
     * Deletes the specified extension for HDInsight cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param extensionName The name of the cluster extension.
     * @param [options] The optional parameters
     * @returns Promise<msRestAzure.LROPoller>
     */
    Extensions.prototype.beginDeleteMethod = function (resourceGroupName, clusterName, extensionName, options) {
        return this.client.sendLRORequest({
            resourceGroupName: resourceGroupName,
            clusterName: clusterName,
            extensionName: extensionName,
            options: options
        }, beginDeleteMethodOperationSpec, options);
    };
    return Extensions;
}());
export { Extensions };
// Operation Specifications
var serializer = new msRest.Serializer(Mappers);
var getMonitoringStatusOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.ClusterMonitoringResponse
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var getOperationSpec = {
    httpMethod: "GET",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName,
        Parameters.extensionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {
            bodyMapper: Mappers.Extension
        },
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginEnableMonitoringOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.ClusterMonitoringRequest, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDisableMonitoringOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/clustermonitoring",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginCreateOperationSpec = {
    httpMethod: "PUT",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName,
        Parameters.extensionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    requestBody: {
        parameterPath: "parameters",
        mapper: tslib_1.__assign({}, Mappers.Extension, { required: true })
    },
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
var beginDeleteMethodOperationSpec = {
    httpMethod: "DELETE",
    path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HDInsight/clusters/{clusterName}/extensions/{extensionName}",
    urlParameters: [
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.clusterName,
        Parameters.extensionName
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    headerParameters: [
        Parameters.acceptLanguage
    ],
    responses: {
        200: {},
        202: {},
        default: {
            bodyMapper: Mappers.ErrorResponse
        }
    },
    serializer: serializer
};
//# sourceMappingURL=extensions.js.map