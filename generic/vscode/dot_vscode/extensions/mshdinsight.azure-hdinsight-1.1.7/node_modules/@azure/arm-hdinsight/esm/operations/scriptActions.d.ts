import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import { HDInsightManagementClientContext } from "../hDInsightManagementClientContext";
/** Class representing a ScriptActions. */
export declare class ScriptActions {
    private readonly client;
    /**
     * Create a ScriptActions.
     * @param {HDInsightManagementClientContext} client Reference to the service client.
     */
    constructor(client: HDInsightManagementClientContext);
    /**
     * Deletes a specified persisted script action of the cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptName The name of the script.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptName The name of the script.
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptName The name of the script.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteMethod(resourceGroupName: string, clusterName: string, scriptName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * Lists all the persisted script actions for the specified cluster.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param [options] The optional parameters
     * @returns Promise<Models.ScriptActionsListByClusterResponse>
     */
    listByCluster(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.ScriptActionsListByClusterResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param callback The callback
     */
    listByCluster(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.ScriptActionsList>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByCluster(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ScriptActionsList>): void;
    /**
     * Gets the script execution detail for the given script execution ID.
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptExecutionId The script execution Id
     * @param [options] The optional parameters
     * @returns Promise<Models.ScriptActionsGetExecutionDetailResponse>
     */
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options?: msRest.RequestOptionsBase): Promise<Models.ScriptActionsGetExecutionDetailResponse>;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptExecutionId The script execution Id
     * @param callback The callback
     */
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, callback: msRest.ServiceCallback<Models.RuntimeScriptActionDetail>): void;
    /**
     * @param resourceGroupName The name of the resource group.
     * @param clusterName The name of the cluster.
     * @param scriptExecutionId The script execution Id
     * @param options The optional parameters
     * @param callback The callback
     */
    getExecutionDetail(resourceGroupName: string, clusterName: string, scriptExecutionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RuntimeScriptActionDetail>): void;
    /**
     * Lists all the persisted script actions for the specified cluster.
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param [options] The optional parameters
     * @returns Promise<Models.ScriptActionsListByClusterNextResponse>
     */
    listByClusterNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ScriptActionsListByClusterNextResponse>;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param callback The callback
     */
    listByClusterNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ScriptActionsList>): void;
    /**
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param options The optional parameters
     * @param callback The callback
     */
    listByClusterNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ScriptActionsList>): void;
}
//# sourceMappingURL=scriptActions.d.ts.map