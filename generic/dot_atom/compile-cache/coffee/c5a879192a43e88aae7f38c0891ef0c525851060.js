(function() {
  module.exports = {
    initialize: function() {
      this._killed = this.killing = false;
      this._yanked = this.yanking = false;
      this.previousCommand = null;
      this.recenters = 0;
      return this._recentered = false;
    },
    beforeCommand: function(event) {
      if (!this._isModifierKeyEvent(event) && !/dabbrev/.test(event.type) && (this.dabbrevState != null)) {
        this.dabbrevState.emacsEditor.dabbrevDone();
        this.dabbrevState = null;
      }
      return this.isDuringCommand = true;
    },
    afterCommand: function(event) {
      if ((this.killing = this._killed)) {
        this._killed = false;
      }
      if ((this.yanking = this._yanked)) {
        this._yanked = false;
      }
      if (this._recentered) {
        this._recentered = false;
        this.recenters = (this.recenters + 1) % 3;
      } else {
        this.recenters = 0;
      }
      this.previousCommand = event.type;
      return this.isDuringCommand = false;
    },
    killed: function() {
      return this._killed = true;
    },
    yanked: function() {
      return this._yanked = true;
    },
    recentered: function() {
      return this._recentered = true;
    },
    yankComplete: function() {
      return this.yanking && !this._yanked;
    },
    _isModifierKeyEvent: function(event) {
      var ref;
      return ((ref = event.originalEvent) != null ? ref.constructor : void 0) === KeyboardEvent && [0x10, 0x11, 0x12, 0x5b, 0x5d].includes(event.originalEvent.which);
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvcHlvdW5nLy5hdG9tL3BhY2thZ2VzL2F0b21pYy1lbWFjcy9saWIvc3RhdGUuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQUEsTUFBTSxDQUFDLE9BQVAsR0FDRTtJQUFBLFVBQUEsRUFBWSxTQUFBO01BQ1YsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsT0FBRCxHQUFXO01BQ3RCLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBQyxDQUFBLE9BQUQsR0FBVztNQUN0QixJQUFDLENBQUEsZUFBRCxHQUFtQjtNQUNuQixJQUFDLENBQUEsU0FBRCxHQUFhO2FBQ2IsSUFBQyxDQUFBLFdBQUQsR0FBZTtJQUxMLENBQVo7SUFPQSxhQUFBLEVBQWUsU0FBQyxLQUFEO01BR2IsSUFBRyxDQUFJLElBQUMsQ0FBQSxtQkFBRCxDQUFxQixLQUFyQixDQUFKLElBQW9DLENBQUksU0FBUyxDQUFDLElBQVYsQ0FBZSxLQUFLLENBQUMsSUFBckIsQ0FBeEMsSUFBdUUsMkJBQTFFO1FBQ0UsSUFBQyxDQUFBLFlBQVksQ0FBQyxXQUFXLENBQUMsV0FBMUIsQ0FBQTtRQUNBLElBQUMsQ0FBQSxZQUFELEdBQWdCLEtBRmxCOzthQUdBLElBQUMsQ0FBQSxlQUFELEdBQW1CO0lBTk4sQ0FQZjtJQWVBLFlBQUEsRUFBYyxTQUFDLEtBQUQ7TUFDWixJQUFHLENBQUMsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsT0FBYixDQUFIO1FBQ0UsSUFBQyxDQUFBLE9BQUQsR0FBVyxNQURiOztNQUdBLElBQUcsQ0FBQyxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxPQUFiLENBQUg7UUFDRSxJQUFDLENBQUEsT0FBRCxHQUFXLE1BRGI7O01BR0EsSUFBRyxJQUFDLENBQUEsV0FBSjtRQUNFLElBQUMsQ0FBQSxXQUFELEdBQWU7UUFDZixJQUFDLENBQUEsU0FBRCxHQUFhLENBQUMsSUFBQyxDQUFBLFNBQUQsR0FBYSxDQUFkLENBQUEsR0FBbUIsRUFGbEM7T0FBQSxNQUFBO1FBSUUsSUFBQyxDQUFBLFNBQUQsR0FBYSxFQUpmOztNQU1BLElBQUMsQ0FBQSxlQUFELEdBQW1CLEtBQUssQ0FBQzthQUN6QixJQUFDLENBQUEsZUFBRCxHQUFtQjtJQWRQLENBZmQ7SUErQkEsTUFBQSxFQUFRLFNBQUE7YUFDTixJQUFDLENBQUEsT0FBRCxHQUFXO0lBREwsQ0EvQlI7SUFrQ0EsTUFBQSxFQUFRLFNBQUE7YUFDTixJQUFDLENBQUEsT0FBRCxHQUFXO0lBREwsQ0FsQ1I7SUFxQ0EsVUFBQSxFQUFZLFNBQUE7YUFDVixJQUFDLENBQUEsV0FBRCxHQUFlO0lBREwsQ0FyQ1o7SUF3Q0EsWUFBQSxFQUFjLFNBQUE7YUFBRyxJQUFDLENBQUEsT0FBRCxJQUFhLENBQUksSUFBQyxDQUFBO0lBQXJCLENBeENkO0lBMENBLG1CQUFBLEVBQXFCLFNBQUMsS0FBRDtBQUNuQixVQUFBO3VEQUFtQixDQUFFLHFCQUFyQixLQUFvQyxhQUFwQyxJQUNFLENBQUMsSUFBRCxFQUFPLElBQVAsRUFBYSxJQUFiLEVBQW1CLElBQW5CLEVBQXlCLElBQXpCLENBQThCLENBQUMsUUFBL0IsQ0FBd0MsS0FBSyxDQUFDLGFBQWEsQ0FBQyxLQUE1RDtJQUZpQixDQTFDckI7O0FBREYiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9XG4gIGluaXRpYWxpemU6IC0+XG4gICAgQF9raWxsZWQgPSBAa2lsbGluZyA9IGZhbHNlXG4gICAgQF95YW5rZWQgPSBAeWFua2luZyA9IGZhbHNlXG4gICAgQHByZXZpb3VzQ29tbWFuZCA9IG51bGxcbiAgICBAcmVjZW50ZXJzID0gMFxuICAgIEBfcmVjZW50ZXJlZCA9IGZhbHNlXG5cbiAgYmVmb3JlQ29tbWFuZDogKGV2ZW50KSAtPlxuICAgICMgU29tZSBwbHVnaW5zIGxpa2UgXCJpbnRlbnRpb25zXCIgYmluZCB0aGluZ3MgdG8gdGhlIHByZXNzaW5nIG9mIGEgbW9kaWZpZXIsXG4gICAgIyB3aGljaCBzaG91bGQgbm90IGJlIGFibGUgdG8gY2FuY2VsIGEgZGFiYnJldi5cbiAgICBpZiBub3QgQF9pc01vZGlmaWVyS2V5RXZlbnQoZXZlbnQpIGFuZCBub3QgL2RhYmJyZXYvLnRlc3QoZXZlbnQudHlwZSkgYW5kIEBkYWJicmV2U3RhdGU/XG4gICAgICBAZGFiYnJldlN0YXRlLmVtYWNzRWRpdG9yLmRhYmJyZXZEb25lKClcbiAgICAgIEBkYWJicmV2U3RhdGUgPSBudWxsXG4gICAgQGlzRHVyaW5nQ29tbWFuZCA9IHRydWVcblxuICBhZnRlckNvbW1hbmQ6IChldmVudCkgLT5cbiAgICBpZiAoQGtpbGxpbmcgPSBAX2tpbGxlZClcbiAgICAgIEBfa2lsbGVkID0gZmFsc2VcblxuICAgIGlmIChAeWFua2luZyA9IEBfeWFua2VkKVxuICAgICAgQF95YW5rZWQgPSBmYWxzZVxuXG4gICAgaWYgQF9yZWNlbnRlcmVkXG4gICAgICBAX3JlY2VudGVyZWQgPSBmYWxzZVxuICAgICAgQHJlY2VudGVycyA9IChAcmVjZW50ZXJzICsgMSkgJSAzXG4gICAgZWxzZVxuICAgICAgQHJlY2VudGVycyA9IDBcblxuICAgIEBwcmV2aW91c0NvbW1hbmQgPSBldmVudC50eXBlXG4gICAgQGlzRHVyaW5nQ29tbWFuZCA9IGZhbHNlXG5cbiAga2lsbGVkOiAtPlxuICAgIEBfa2lsbGVkID0gdHJ1ZVxuXG4gIHlhbmtlZDogLT5cbiAgICBAX3lhbmtlZCA9IHRydWVcblxuICByZWNlbnRlcmVkOiAtPlxuICAgIEBfcmVjZW50ZXJlZCA9IHRydWVcblxuICB5YW5rQ29tcGxldGU6IC0+IEB5YW5raW5nIGFuZCBub3QgQF95YW5rZWRcblxuICBfaXNNb2RpZmllcktleUV2ZW50OiAoZXZlbnQpIC0+XG4gICAgZXZlbnQub3JpZ2luYWxFdmVudD8uY29uc3RydWN0b3IgaXMgS2V5Ym9hcmRFdmVudCBhbmRcbiAgICAgIFsweDEwLCAweDExLCAweDEyLCAweDViLCAweDVkXS5pbmNsdWRlcyhldmVudC5vcmlnaW5hbEV2ZW50LndoaWNoKVxuIl19
