
################################################################################
# SSH through a bastion host
################################################################################

# Example: https://myopswork.com/transparent-ssh-tunnel-through-a-bastion-host-d1d864ddb9ae
#
# ssh -i mymaster.pem  ec2-user@10.0.2.56 -o "proxycommand ssh -W %h:%p -i mymaster.pem ec2-user@mybastion.elb.amazonaws.com"
#
#Host bastion
#  Hostname ebsbastion.us-west-2.elb.amazonaws.com
#  User ec2-user
#  IdentityFile  ~/Downloads/EBS-Jenkins.pem
#
#Host 10.0.2.*
#  IdentityFile  ~/Downloads/EBS-Jenkins.pem
#  User ec2-user
#  ProxyCommand ssh -W %h:%p  ec2-user@bastion

# ssh cloudbreak@10.0.2.56 -o "proxycommand ssh -W %h:%p -i mymaster.pem ec2-user@mybastion.elb.amazonaws.com"

Host bastion
  # This is the ambari host
  HostName 52.45.220.96
  User cloudbreak
  Port 22
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  LogLevel FATAL
  #ForwardAgent yes

Host 10.0.0.*
  User cloudbreak
  ProxyCommand ssh -W %h:%p  cloudbreak@bastion


################################################################################
# ACI: Hyperv ubuntu vm
################################################################################

Host h
  HostName 172.18.27.137
  User youngp
  Port 22
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentitiesOnly yes
  LogLevel FATAL

################################################################################
# ACI: HADOOP PERF cluster
################################################################################

Host hadoop-perf
    HostName cov3lphdpedge01vm.am.tsacorp.com
    User youngp

# su - srvredi # Welcome..

# Authorized keys file has perms 600, so this fails
#Host hadoop-perf-srvredi
#    HostName cov3lphdpedge01vm.am.tsacorp.com
#    User srvredi

# su - kumarm # Become kumarm (using common password)
Host hadoop-perf-youngp
    HostName cov3lphdpedge01vm.am.tsacorp.com
    User youngp

# sudo su - # kumarm can become root
Host hadoop-perf-kumarm
    HostName cov3lphdpedge01vm.am.tsacorp.com
    User kumarm

Host hadoop-perf-root
    HostName cov3lphdpedge01vm.am.tsacorp.com
    User root


################################################################################
# ACI: HADOOP DEV
################################################################################


# http://cov3lhdpmst03.am.tsacorp.com:8080/
# cov3lhdpedge01vm.am.tsacorp.com
# youngp/Welcome.... - no bang
Host hadoop-dev
    HostName cov3lhdpedge01vm.am.tsacorp.com
    User youngp

Host hadoop-dev-root
    HostName cov3lhdpedge01vm.am.tsacorp.com
    User root

# HYPERV-DEV: info from ~/bin-local/_get_hyperv_ip
Host v
  HostName 192.168.183.89
  User vagrant
  Port 22
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  IdentityFile "C:/Users/youngp/OneDrive - ACI Worldwide Corp/data/ACI/Tools/Vagrant/ubuntu-hyperv-CAN-NOT-SHARE-FOLDER/.vagrant/machines/default/hyperv/private_key"
  IdentitiesOnly yes
  LogLevel FATAL


################################################################################
# AWS: CLOUDBREAK HADOOP
################################################################################

Host cloudbreak
  HostName 3.212.1.106
  User ec2-user
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes

#
# SSH PORT FOWARDING
# Docs
#   - https://zaiste.net/ssh_port_forwarding/
# Notes
#   - There are 3 types of port forwarding:
#     - local port forwarding
#       - ssh -L source_port:forward_to_host:destination_port via_host
#     - remote port forwarding
#       -
#     - dynamic port forwarding
#       -
#   - Disable shell
#     - '-nNT'
#   - Disable shell, and run in background
#     - '-nNTf'
#

# This supports:
#   - ssh -L 8080:localhost:8080 ambari
#     - Opens a local SSH connection to ambari, with a tunnel which allows:
#     - firefox https:/localhost:8080
#   - ssh -L 9000:localhost:8080 ambari
#     - Same as above, but use port 9000 locally to connect to 8080 on the remote machine
#   - ssh -L 8080:localhost:8080 ambari -T
#     - same as above, but prevents opening a shell on the other end
#   - ssh -L localhost:8080:localhost:8080 ambari
#     - same as above, but adds a bind-address so only local apps can use the tunnel
#   - ssh -L localhost:8080:localhost:8080 ambari -TNnf
#     - same as above, but runs it properly in the background
Host ambari
  HostName 52.45.220.96
  #User cloudbreak
  User hive
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes
  #DynamicForward 8080

Host ambari-as-cloudbreak
  HostName 52.45.220.96
  User cloudbreak
  #User hive
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes
  #DynamicForward 8080

Host druid-coordinator
  HostName 54.236.230.2
  User cloudbreak
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes

Host druid-broker
  HostName 100.25.157.224
  #User ec2-user
  User cloudbreak
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes

#worker
#  HostName 52.86.237.19

# Default
Host *
  User root
  Port 22
  LogLevel FATAL
  UserKnownHostsFile /dev/null
  StrictHostKeyChecking no
  PasswordAuthentication no
  ForwardAgent yes
